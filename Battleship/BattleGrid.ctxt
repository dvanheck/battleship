#BlueJ class context
comment0.params=
comment0.target=BattleGrid()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ BattleGrid\r\n
comment1.params=
comment1.target=int\ getNumShips()
comment1.text=\r\n\ Returns\ the\ number\ of\ ships\ that\ can\ be\ placed\ on\ the\ BattleGrid\r\n\r\n\ @return\ \ \ number\ of\ unsunken\ ships\ currently\ on\ the\ BattleGrid\r\n
comment10.params=r\ c\ rot\ length\ state
comment10.target=void\ setSquaresToShipspace(int,\ int,\ int,\ int,\ int)
comment10.text=\r\n\ Sets\ the\ squares\ following\ the\ starting\ square\ to\ the\ specified\ state\ in\ the\ specified\ rotation\ direction\r\n\ if\ the\ squares\ hit\ a\ ship,\ the\ method\ does\ not\ do\ anything\r\n\r\n\ @param\ \ r\ \ \ the\ row\ value(y\ coordinate)\ of\ the\ square\ to\ start\ on\r\n\ @param\ \ c\ \ \ the\ column\ value(x\ coordinate)\ of\ the\ square\ to\ start\ on\r\n\ @param\ \ rot\ \ \ the\ clockwise\ rotation\ direction\ to\ set\ squares\ in\ a\ line\ (0\ is\ 0\ or\ 360\ degrees(up),\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 1\ is\ 90\ degrees(right),\ 2\ is\ 180(down),\ 3\ is\ 270(left)\r\n\ @param\ \ length\ \ \ the\ amount\ of\ squares\ to\ change\ in\ the\ direction\ specified\r\n\ @param\ \ state\ \ \ the\ state\ to\ change\ the\ squares\ to\ (0\ means\ nothing\ is\ there,\ 1\ a\ destroyer\ is\ there,\ 2\ is\ a\ submarine,\ 3\ is\ a\ cruiser,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 4\ is\ a\ battlship,\ 5\ is\ a\ carrier,\ 6\ is\ a\ hit(a\ fire),\ 7\ is\ a\ missed\ square,\ 8\ is\ a\ sunken\ ship)\ \ \ \ \ \ \ \ \ \r\n
comment11.params=r\ c\ rot\ length\ isPlayerTurn
comment11.target=boolean\ checkCollision(int,\ int,\ int,\ int,\ boolean)
comment11.text=\r\n\ Checks\ if\ the\ squares\ from\ a\ given\ coordinate\ across\ a\ given\ length\ in\ a\ given\ \r\n\ direction\ are\ all\ empty\ (have\ a\ value\ of\ 0)\r\n\ Returns\ true\ if\ ship\ does\ not\ collide/go\ out\ of\ bounds\ and\ false\ if\ it\ does\r\n\r\n\ @param\ \ r\ \ \ the\ row\ value(y\ coordinate)\ of\ the\ square\ to\ start\ on\r\n\ @param\ \ c\ \ \ the\ column\ value(x\ coordinate)\ of\ the\ square\ to\ start\ on\r\n\ @param\ \ rot\ \ \ the\ clockwise\ rotation\ direction\ to\ set\ squares\ in\ a\ line\ (0\ is\ 0\ or\ 360\ degrees(up),\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 1\ is\ 90\ degrees(right),\ 2\ is\ 180(down),\ 3\ is\ 270(left)\r\n\ @param\ \ length\ \ \ the\ amount\ of\ squares\ to\ change\ in\ the\ direction\ specified\r\n\ @return\ \ isValid\ \ \ set\ to\ true\ if\ the\ placed\ ship\ does\ not\ collide\ or\ go\ off\ the\ board,\ and\ false\ if\ it\ does\ go\ off\ the\ board\r\n
comment12.params=
comment12.target=boolean\ hasHitMarkers()
comment12.text=\r\n\ Checks\ if\ a\ there\ are\ any\ hitMarkers\ on\ the\ playerGrid\r\n\r\n\ @return\ \ true\ if\ there\ is\ a\ hit\ on\ the\ grid,\ false\ if\ no\ hits\ on\ grid\ (obviously\ excluding\ sunken\ ships)\r\n
comment13.params=
comment13.target=int\ getNumHits()
comment13.text=\r\n\ Checks\ if\ a\ there\ are\ any\ hitMarkers\ on\ the\ playerGrid\r\n\r\n\ @return\ \ the\ number\ of\ hits\ on\ the\ grid,\ excluding\ sunken\ ships\r\n
comment14.params=
comment14.target=boolean\ hitsAreHorizontal()
comment14.text=\r\n\ Checks\ if\ there\ is\ a\ row\ of\ horizontal\ hits\ and\ returns\ true\ if\ there\ are\ and\ false\ if\ there\ are\ not\ any\ horizontal\ hit\ rows\r\n\r\n\ @return\ \ true\ or\ false\ for\ if\ there\ is\ a\ row\ of\ horizontal\ hits\ or\ not\r\n
comment15.params=
comment15.target=Coordinate\ findFirstHit()
comment15.text=\r\n\ Returns\ the\ Coordinate\ of\ the\ first\ hit\ found\r\n\r\n\ @return\ \ Coordinate\ of\ the\ first\ hit\ found\r\n
comment16.params=areHorizontal
comment16.target=Coordinate\ findLastHit(boolean)
comment16.text=\r\n\ Returns\ the\ Coordinate\ of\ the\ last\ hit\ found\ after\ a\ line\ of\ hits\ with\ a\ parameter\ for\ if\ the\ hits\ are\ horizontal\ or\ vertical\r\n\r\n\ @param\ \ areHorizontal\ \ \ true\ if\ the\ hits\ are\ horizontal,\ false\ if\ hits\ are\ vertical\r\n\ @return\ \ Coordinate\ of\ the\ last\ hit\ found\r\n
comment17.params=r\ c
comment17.target=boolean\ hasShip(int,\ int)
comment17.text=\r\n\ Checks\ if\ a\ ship\ is\ located\ at\ a\ specified\ coordinate\ and\ returns\ true\ if\ a\ ship\ is\ there\ and\ false\ if\ a\ ship\ is\ not\ there\r\n\r\n\ @param\ \ r\ \ \ the\ row\ to\ check\r\n\ @param\ \ c\ \ \ the\ column\ to\ check\r\n\ @return\ \ hasShip\ \ \ if\ the\ square\ has\ a\ ship\ on\ it\ \ \ \r\n
comment18.params=r\ c
comment18.target=boolean\ fireOnSquare(int,\ int)
comment18.text=\r\n\ Takes\ in\ a\ square\ and\ if\ there\ is\ a\ ship\ on\ that\ square,\ the\ square\ state\ is\ set\ to\ 7(hit\ ship)\ and\ true\ is\ returned\r\n\ If\ there\ is\ not\ a\ ship\ on\ the\ given\ square,\ the\ square\ is\ set\ to\ 6(missed\ ship)\ and\ false\ is\ returned\r\n\r\n\ @param\ \ r\ \ \ the\ row\ to\ fire\ on\r\n\ @param\ \ c\ \ \ the\ column\ to\ fire\ on\r\n\ @return\ \ true\ or\ false\ \ \ if\ a\ ship\ was\ hit,\ return\ true,\ if\ the\ shot\ was\ a\ miss,\ return\ false\r\n
comment19.params=r\ c
comment19.target=boolean\ hasBeenFiredOn(int,\ int)
comment19.text=\r\n\ Checks\ if\ the\ square\ has\ been\ hit\ or\ missed\ yet\ and\ returns\ a\ true\ or\ false\r\n\r\n\ @return\ \ true\ if\ the\ square\ has\ been\ hit\ or\ missed,\ false\ if\ the\ square\ has\ not\ been\ hit\ or\ missed\r\n
comment2.params=
comment2.target=int\ getMaxShips()
comment2.text=\r\n\ Returns\ the\ maximum\ number\ of\ ships\ that\ can\ be\ placed\ on\ the\ battlefield\r\n\ (the\ number\ of\ ships\ that\ are\ placed\ at\ the\ beginning\ of\ the\ game)\r\n\r\n\ @return\ \ myNUM_SHIPS\ \ \ the\ number\ of\ ships\ that\ can\ be\ on\ the\ grid\r\n
comment20.params=
comment20.target=java.lang.String\ findSunkenShip()
comment20.text=\r\n\ Finds\ a\ sunken\ ship\ and\ returns\ the\ String\ of\ the\ ship\ found,\ \r\n\ if\ no\ ship\ is\ found,\ return\ ""\r\n\r\n\ @return\ \ sunkenShip\ \ \ the\ String\ name\ of\ the\ sunken\ ship\r\n
comment21.params=r\ c
comment21.target=java.lang.String\ squareStateToString(int,\ int)
comment21.text=\r\n\ Returns\ the\ String\ state\ of\ the\ square\ entered\r\n\r\n\ @param\ \ y\ \ \ a\ sample\ parameter\ for\ a\ method\r\n\ @return\ \ \ state\ \ the\ String\ state\ of\ the\ square(0\ means\ nothing\ is\ there,\ 1\ a\ destroyer\ is\ there,\ 2\ is\ a\ submarine,\ 3\ is\ a\ cruiser,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 4\ is\ a\ battlship,\ 5\ is\ a\ carrier,\ 6\ is\ a\ hit(a\ fire),\ 7\ is\ a\ missed\ square,\ 8\ is\ a\ sunken\ ship)\ \ \ \ \ \ \r\n
comment3.params=index
comment3.target=Ship\ getShip(int)
comment3.text=\r\n\ Get's\ the\ ship\ at\ the\ specified\ index\ from\ ArrayList\ of\ ships\r\n\r\n\ @param\ \ index\ \ \ the\ index\ of\ the\ ship\ in\ the\ ArrayList\r\n\ @return\ \ \ \ \ the\ specified\ ship\r\n
comment4.params=
comment4.target=java.util.ArrayList\ getShips()
comment4.text=\r\n\ Get's\ the\ myShips\ ArrayList\r\n\r\n\ @return\ \ myShips\ \ \ the\ ArrayList\ of\ ships\ on\ the\ grid\r\n
comment5.params=r\ c
comment5.target=int\ getSquareState(int,\ int)
comment5.text=\r\n\ Returns\ the\ state\ of\ a\ specified\ square\r\n\r\n\ @param\ \ r\ \ row\ number\r\n\ @param\ \ c\ \ column\ number\r\n\ @return\ \ state\ \ \ the\ state\ of\ the\ square\ (0\ means\ nothing\ is\ there,\ 1\ a\ destroyer\ is\ there,\ 2\ is\ a\ submarine,\ 3\ is\ a\ cruiser,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 4\ is\ a\ battlship,\ 5\ is\ a\ carrier,\ 6\ is\ a\ hit,\ 7\ is\ a\ missed\ square,\ 8\ is\ a\ sunken\ ship)\r\n
comment6.params=newShip
comment6.target=void\ addShip(Ship)
comment6.text=\r\n\ Takes\ in\ a\ Ship\ and\ adds\ it\ to\ the\ current\ ArrayList\ of\ ships\r\n\ \r\n\ @param\ \ newShip\ \ \ the\ ship\ to\ be\ added\ to\ the\ myShips\ ArrayList\r\n\ @return\ \ \ \ \ the\ sum\ of\ x\ and\ y\ \r\n
comment7.params=
comment7.target=void\ clearShips()
comment7.text=\r\n\ Removes\ all\ ships\ from\ the\ myShips\ ArrayList\r\n\r\n
comment8.params=r\ c\ state
comment8.target=void\ setSquare(int,\ int,\ int)
comment8.text=\r\n\ Sets\ the\ given\ square\ to\ a\ given\ state\r\n\r\n\ @param\ \ r\ \ \ the\ int\ row\ value(y-coordinate)\ of\ the\ square\r\n\ @param\ \ c\ \ \ the\ int\ column\ value(x-coordinate)\ of\ the\ square\r\n\ @param\ \ state\ \ \ state\ to\ set\ the\ square\ (0\ means\ nothing\ is\ there,\ 1\ a\ destroyer\ is\ there,\ 2\ is\ a\ submarine,\ 3\ is\ a\ cruiser,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 4\ is\ a\ battlship,\ 5\ is\ a\ carrier,\ 6\ is\ a\ hit(a\ fire),\ 7\ is\ a\ missed\ square,\ 8\ is\ a\ sunken\ ship)\r\n
comment9.params=r\ c\ rot\ length\ state
comment9.target=void\ setSquares(int,\ int,\ int,\ int,\ int)
comment9.text=\r\n\ Sets\ the\ squares\ following\ the\ starting\ square\ to\ the\ specified\ state\ in\ the\ specified\ rotation\ direction\r\n\r\n\ @param\ \ r\ \ \ the\ row\ value(y\ coordinate)\ of\ the\ square\ to\ start\ on\r\n\ @param\ \ c\ \ \ the\ column\ value(x\ coordinate)\ of\ the\ square\ to\ start\ on\r\n\ @param\ \ rot\ \ \ the\ clockwise\ rotation\ direction\ to\ set\ squares\ in\ a\ line\ (0\ is\ 0\ or\ 360\ degrees(up),\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 1\ is\ 90\ degrees(right),\ 2\ is\ 180(down),\ 3\ is\ 270(left)\r\n\ @param\ \ length\ \ \ the\ amount\ of\ squares\ to\ change\ in\ the\ direction\ specified\r\n\ @param\ \ state\ \ \ the\ state\ to\ change\ the\ squares\ to\ (0\ means\ nothing\ is\ there,\ 1\ a\ destroyer\ is\ there,\ 2\ is\ a\ submarine,\ 3\ is\ a\ cruiser,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 4\ is\ a\ battlship,\ 5\ is\ a\ carrier,\ 6\ is\ a\ hit(a\ fire),\ 7\ is\ a\ missed\ square,\ 8\ is\ a\ sunken\ ship)\ \ \ \ \ \ \ \ \ \r\n
numComments=22
